/**
 * üìö EMAIL STORAGE - ALMACENAMIENTO DE EMAILS
 * ========================================
 * Sistema de almacenamiento en memoria para emails enviados
 * Estructura de datos como se especifica en el reto
 */

class EmailStorage {
    constructor() {
        /**
         * üìß Array de emails almacenados
         * Estructura seg√∫n especificaci√≥n del reto:
         * emails = [
         *   {
         *     id: string,
         *     from: string,
         *     to: string,
         *     subject: string,
         *     message: string,
         *     timestamp: string,
         *     status: string,
         *     postmarkId?: string,
         *     error?: string
         *   }
         * ]
         */
        this.emails = [];
        
        console.log('üìö EmailStorage inicializado');
        this.initializeWithSampleData();
    }
    
    /**
     * üéØ Inicializar con datos de ejemplo
     */
    initializeWithSampleData() {
        const sampleEmails = [
            {
                id: 'sample-1',
                from: 'admin@codenotch.com',
                to: 'student@example.com',
                subject: 'Bienvenido a Email API REST',
                message: 'Este es un email de bienvenida para probar la funcionalidad de la API.\n\n¬°Gracias por usar nuestro servicio!',
                timestamp: new Date('2025-01-01T10:00:00Z').toISOString(),
                status: 'sent',
                postmarkId: 'sample-postmark-id-1'
            },
            {
                id: 'sample-2',
                from: 'noreply@codenotch.com',
                to: 'test@example.com',
                subject: 'Confirmaci√≥n de registro',
                message: 'Tu registro ha sido confirmado exitosamente.\n\nPuedes comenzar a usar todos nuestros servicios.',
                timestamp: new Date('2025-01-01T11:30:00Z').toISOString(),
                status: 'sent',
                postmarkId: 'sample-postmark-id-2'
            },
            {
                id: 'sample-3',
                from: 'info@codenotch.com',
                to: 'support@example.com',
                subject: 'Nuevo mensaje de contacto',
                message: 'Has recibido un nuevo mensaje a trav√©s del formulario de contacto.\n\nPor favor, revisa la bandeja de entrada.',
                timestamp: new Date('2025-01-01T14:15:00Z').toISOString(),
                status: 'sent',
                postmarkId: 'sample-postmark-id-3'
            }
        ];
        
        this.emails = [...sampleEmails];
        console.log(`üìß ${this.emails.length} emails de ejemplo cargados`);
    }
    
    /**
     * ‚ûï Agregar un nuevo email al almacenamiento
     * @param {Object} emailData - Datos del email
     * @returns {Object} - Email agregado
     */
    addEmail(emailData) {
        // Validar estructura del email
        if (!this.isValidEmailStructure(emailData)) {
            throw new Error('Estructura de email inv√°lida');
        }
        
        // Crear copia del email con timestamp si no existe
        const email = {
            ...emailData,
            timestamp: emailData.timestamp || new Date().toISOString()
        };
        
        // Agregar al array
        this.emails.push(email);
        
        console.log(`üìß Email agregado al storage: ${email.id} (${email.from} ‚Üí ${email.to})`);
        
        return email;
    }
    
    /**
     * üîç Obtener emails enviados DESDE una direcci√≥n espec√≠fica
     * @param {string} fromEmail - Direcci√≥n de email remitente
     * @returns {Array} - Array de emails
     */
    getEmailsFrom(fromEmail) {
        const normalizedFrom = fromEmail.toLowerCase().trim();
        const emails = this.emails.filter(email => 
            email.from.toLowerCase() === normalizedFrom
        );
        
        console.log(`üîç Emails encontrados desde "${fromEmail}": ${emails.length}`);
        
        // Ordenar por timestamp descendente (m√°s recientes primero)
        return emails.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    }
    
    /**
     * üîç Obtener emails enviados HACIA una direcci√≥n espec√≠fica
     * @param {string} toEmail - Direcci√≥n de email destinatario
     * @returns {Array} - Array de emails
     */
    getEmailsTo(toEmail) {
        const normalizedTo = toEmail.toLowerCase().trim();
        const emails = this.emails.filter(email => 
            email.to.toLowerCase() === normalizedTo
        );
        
        console.log(`üîç Emails encontrados hacia "${toEmail}": ${emails.length}`);
        
        // Ordenar por timestamp descendente (m√°s recientes primero)
        return emails.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    }
    
    /**
     * üìß Obtener un email por ID
     * @param {string} emailId - ID del email
     * @returns {Object|null} - Email encontrado o null
     */
    getEmailById(emailId) {
        const email = this.emails.find(email => email.id === emailId);
        
        if (email) {
            console.log(`üìß Email encontrado: ${emailId}`);
        } else {
            console.log(`‚ùå Email no encontrado: ${emailId}`);
        }
        
        return email || null;
    }
    
    /**
     * üìä Obtener todos los emails (para administraci√≥n)
     * @param {number} limit - L√≠mite de emails a retornar
     * @param {number} offset - Offset para paginaci√≥n
     * @returns {Array} - Array de emails
     */
    getAllEmails(limit = 50, offset = 0) {
        const sortedEmails = this.emails.sort((a, b) => 
            new Date(b.timestamp) - new Date(a.timestamp)
        );
        
        const paginatedEmails = sortedEmails.slice(offset, offset + limit);
        
        console.log(`üìä Retornando ${paginatedEmails.length} emails (offset: ${offset}, limit: ${limit})`);
        
        return paginatedEmails;
    }
    
    /**
     * üî¢ Obtener el n√∫mero total de emails almacenados
     * @returns {number} - Cantidad de emails
     */
    getEmailCount() {
        return this.emails.length;
    }
    
    /**
     * üìà Obtener estad√≠sticas del almacenamiento
     * @returns {Object} - Estad√≠sticas
     */
    getStorageStats() {
        const stats = {
            totalEmails: this.emails.length,
            sentEmails: this.emails.filter(email => email.status === 'sent').length,
            failedEmails: this.emails.filter(email => email.status === 'failed').length,
            pendingEmails: this.emails.filter(email => email.status === 'pending').length,
            uniqueSenders: [...new Set(this.emails.map(email => email.from))].length,
            uniqueRecipients: [...new Set(this.emails.map(email => email.to))].length,
            oldestEmail: this.emails.length > 0 ? 
                new Date(Math.min(...this.emails.map(email => new Date(email.timestamp)))).toISOString() : null,
            newestEmail: this.emails.length > 0 ? 
                new Date(Math.max(...this.emails.map(email => new Date(email.timestamp)))).toISOString() : null
        };
        
        console.log('üìà Estad√≠sticas del storage:', stats);
        
        return stats;
    }
    
    /**
     * üîç Buscar emails por contenido
     * @param {string} searchTerm - T√©rmino de b√∫squeda
     * @returns {Array} - Emails que coinciden
     */
    searchEmails(searchTerm) {
        const term = searchTerm.toLowerCase().trim();
        
        const matchingEmails = this.emails.filter(email => 
            email.subject.toLowerCase().includes(term) ||
            email.message.toLowerCase().includes(term) ||
            email.from.toLowerCase().includes(term) ||
            email.to.toLowerCase().includes(term)
        );
        
        console.log(`üîç B√∫squeda "${searchTerm}": ${matchingEmails.length} resultados`);
        
        return matchingEmails.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
    }
    
    /**
     * üóëÔ∏è Eliminar un email por ID (para administraci√≥n)
     * @param {string} emailId - ID del email a eliminar
     * @returns {boolean} - True si se elimin√≥, false si no se encontr√≥
     */
    deleteEmail(emailId) {
        const initialLength = this.emails.length;
        this.emails = this.emails.filter(email => email.id !== emailId);
        
        const deleted = this.emails.length < initialLength;
        
        if (deleted) {
            console.log(`üóëÔ∏è Email eliminado: ${emailId}`);
        } else {
            console.log(`‚ùå Email no encontrado para eliminar: ${emailId}`);
        }
        
        return deleted;
    }
    
    /**
     * üßπ Limpiar emails antiguos (para mantenimiento)
     * @param {number} daysOld - D√≠as de antig√ºedad
     * @returns {number} - N√∫mero de emails eliminados
     */
    cleanOldEmails(daysOld = 30) {
        const cutoffDate = new Date();
        cutoffDate.setDate(cutoffDate.getDate() - daysOld);
        
        const initialLength = this.emails.length;
        this.emails = this.emails.filter(email => 
            new Date(email.timestamp) >= cutoffDate
        );
        
        const deletedCount = initialLength - this.emails.length;
        
        console.log(`üßπ Emails antiguos eliminados: ${deletedCount} (m√°s de ${daysOld} d√≠as)`);
        
        return deletedCount;
    }
    
    /**
     * ‚úÖ Validar estructura de email
     * @param {Object} emailData - Datos del email
     * @returns {boolean} - True si es v√°lido
     */
    isValidEmailStructure(emailData) {
        const requiredFields = ['id', 'from', 'to', 'subject', 'message'];
        
        // Verificar que existan los campos requeridos
        for (const field of requiredFields) {
            if (!emailData.hasOwnProperty(field) || 
                typeof emailData[field] !== 'string' || 
                emailData[field].trim().length === 0) {
                console.error(`‚ùå Campo inv√°lido o faltante: ${field}`);
                return false;
            }
        }
        
        // Verificar que status sea v√°lido si existe
        if (emailData.status && 
            !['pending', 'sent', 'failed'].includes(emailData.status)) {
            console.error(`‚ùå Status inv√°lido: ${emailData.status}`);
            return false;
        }
        
        return true;
    }
    
    /**
     * üíæ Exportar datos (para backup)
     * @returns {Object} - Datos exportables
     */
    exportData() {
        return {
            emails: this.emails,
            exportDate: new Date().toISOString(),
            totalCount: this.emails.length,
            stats: this.getStorageStats()
        };
    }
    
    /**
     * üì• Importar datos (para restaurar backup)
     * @param {Object} data - Datos a importar
     * @returns {boolean} - True si se import√≥ correctamente
     */
    importData(data) {
        try {
            if (!data.emails || !Array.isArray(data.emails)) {
                throw new Error('Formato de datos inv√°lido');
            }
            
            // Validar cada email
            for (const email of data.emails) {
                if (!this.isValidEmailStructure(email)) {
                    throw new Error(`Email inv√°lido encontrado: ${email.id}`);
                }
            }
            
            this.emails = [...data.emails];
            
            console.log(`üì• Datos importados: ${this.emails.length} emails`);
            
            return true;
            
        } catch (error) {
            console.error('‚ùå Error al importar datos:', error.message);
            return false;
        }
    }
}

module.exports = EmailStorage;