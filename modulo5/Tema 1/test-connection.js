/**
 * üß™ TEST DE CONEXI√ìN A LA BASE DE DATOS
 * M√≥dulo 5 - Tema 1: Verificar conectividad MySQL
 */

import db from './database.js';
import colors from 'colors';

/**
 * üèÉ‚Äç‚ôÇÔ∏è Funci√≥n principal de pruebas
 */
async function runTests() {
    console.log('üß™ INICIANDO PRUEBAS DE CONEXI√ìN MYSQL'.cyan);
    console.log('=' .repeat(50));
    
    try {
        // 1. Crear pool de conexiones
        console.log('\nüìä 1. Creando pool de conexiones...'.blue);
        db.createPool();
        
        // 2. Probar conexi√≥n b√°sica
        console.log('\nüîå 2. Probando conexi√≥n b√°sica...'.blue);
        const connectionResult = await db.testConnection();
        
        if (!connectionResult) {
            throw new Error('No se pudo establecer conexi√≥n con la base de datos');
        }
        
        // 3. Obtener informaci√≥n de la base de datos
        console.log('\nüìã 3. Obteniendo informaci√≥n de la base de datos...'.blue);
        const dbInfo = await db.getDatabaseInfo();
        
        console.log('\nüìä INFORMACI√ìN DE LA BASE DE DATOS:'.green);
        console.log(`   üè∑Ô∏è  Nombre: ${dbInfo.database.database_name}`);
        console.log(`   üî§ Charset: ${dbInfo.database.charset}`);
        console.log(`   üìù Collation: ${dbInfo.database.collation}`);
        console.log(`   üìä Total de tablas: ${dbInfo.totalTables}`);
        
        console.log('\nüìã TABLAS EN LA BASE DE DATOS:'.green);
        dbInfo.tables.forEach((table, index) => {
            console.log(`   ${index + 1}. ${table.table_name} (${table.row_count || 0} filas)`);
        });
        
        // 4. Ejecutar consulta de prueba
        console.log('\nüîç 4. Ejecutando consulta de prueba...'.blue);
        const testQuery = `
            SELECT 
                'Conexi√≥n exitosa' as status,
                DATABASE() as current_database,
                USER() as current_user,
                VERSION() as mysql_version,
                NOW() as current_timestamp
        `;
        
        const queryResult = await db.executeQuery(testQuery);
        
        console.log('\n‚úÖ RESULTADO DE LA CONSULTA DE PRUEBA:'.green);
        console.log(queryResult.results[0]);
        console.log(`‚è±Ô∏è  Tiempo de ejecuci√≥n: ${queryResult.executionTime}ms`);
        
        // 5. Verificar existencia de tablas del proyecto
        console.log('\nüîç 5. Verificando tablas del proyecto...'.blue);
        const tableCheckQuery = `
            SELECT 
                table_name,
                CASE 
                    WHEN table_name IN ('students', 'teachers', 'subjects', 'teams', 'subject_teacher', 'marks') 
                    THEN '‚úÖ Existe'
                    ELSE '‚ùå No existe'
                END as status
            FROM information_schema.tables 
            WHERE table_schema = DATABASE()
            ORDER BY table_name
        `;
        
        const tableCheckResult = await db.executeQuery(tableCheckQuery);
        
        console.log('\nüìä ESTADO DE LAS TABLAS DEL PROYECTO:'.green);
        tableCheckResult.results.forEach(table => {
            console.log(`   ${table.status} ${table.table_name}`);
        });
        
        // 6. Estad√≠sticas de datos
        console.log('\nüìà 6. Obteniendo estad√≠sticas de datos...'.blue);
        const statsQueries = [
            'SELECT COUNT(*) as total FROM students',
            'SELECT COUNT(*) as total FROM teachers', 
            'SELECT COUNT(*) as total FROM subjects',
            'SELECT COUNT(*) as total FROM teams',
            'SELECT COUNT(*) as total FROM subject_teacher',
            'SELECT COUNT(*) as total FROM marks'
        ];
        
        const tableNames = ['students', 'teachers', 'subjects', 'teams', 'subject_teacher', 'marks'];
        
        console.log('\nüìä ESTAD√çSTICAS DE REGISTROS:'.green);
        for (let i = 0; i < statsQueries.length; i++) {
            try {
                const result = await db.executeQuery(statsQueries[i]);
                console.log(`   üìã ${tableNames[i]}: ${result.results[0].total} registros`);
            } catch (error) {
                console.log(`   ‚ùå ${tableNames[i]}: Error al consultar (${error.message})`);
            }
        }
        
        console.log('\nüéâ TODAS LAS PRUEBAS COMPLETADAS EXITOSAMENTE'.green);
        console.log('=' .repeat(50));
        
    } catch (error) {
        console.log('\n‚ùå ERROR EN LAS PRUEBAS:'.red);
        console.log(`   üö´ Mensaje: ${error.message}`);
        console.log('   üí° Posibles soluciones:');
        console.log('      1. Verificar que MySQL est√© ejecut√°ndose');
        console.log('      2. Comprobar las credenciales en el archivo .env');
        console.log('      3. Asegurar que la base de datos "escuela_db" existe');
        console.log('      4. Verificar los permisos del usuario de MySQL');
        
        process.exit(1);
        
    } finally {
        // Cerrar conexiones
        await db.closePool();
        console.log('\nüîí Conexiones cerradas. Test finalizado.'.yellow);
    }
}

// Ejecutar las pruebas
runTests();